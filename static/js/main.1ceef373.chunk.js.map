{"version":3,"sources":["components/Button.js","components/Output.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","click","bind","onClick","this","className","type","name","console","warn","Component","Output","display","Calculator","state","showing","previous","operator","compute","thing","isNaN","setState","compitewithsign","todo","length","includes","sign","number1","number2","parseFloat","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1ceef373.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../styles/Button.css\";\r\n\r\nclass Button extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.click = this.click.bind(this);\r\n    }\r\n    render() {\r\n        return (\r\n            <button\r\n                onClick={this.click}\r\n                className={this.props.type + \" button\"}\r\n            >\r\n                {this.props.name}\r\n            </button>\r\n        );\r\n    }\r\n    click() {\r\n        if (this.props.click) {\r\n            this.props.click(this.props.name);\r\n        } else {\r\n            console.warn(\"This button does not have any handler! I assume this is a bug.\")\r\n        }\r\n    }\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"../styles/Output.css\";\r\n\r\nfunction Output(props) {\r\n    return (\r\n        <div className=\"output\">\r\n            <p>{props.display}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Output;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/Calculator.css\";\r\nimport Button from \"./Button\";\r\nimport Output from \"./Output\";\r\n\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { showing: null, previous: null, operator: null };\r\n        this.compute = this.compute.bind(this);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Calculator\">\r\n                <Output display={this.state.showing ? this.state.showing : 0} />\r\n                <div className=\"row\">\r\n                    <Button name=\"AC\" type=\"other large\" click={this.compute} />\r\n                    <Button name=\"%\" type=\"other\" click={this.compute} />\r\n                    <Button name=\"÷\" type=\"operator\" click={this.compute} />\r\n                </div>\r\n                <div className=\"row\">\r\n                    <Button name=\"7\" type=\"number\" click={this.compute} />\r\n                    <Button name=\"8\" type=\"number\" click={this.compute} />\r\n                    <Button name=\"9\" type=\"number\" click={this.compute} />\r\n                    <Button name=\"×\" type=\"operator\" click={this.compute} />\r\n                </div>\r\n                <div className=\"row\">\r\n                    <Button name=\"4\" type=\"number\" click={this.compute} />\r\n                    <Button name=\"5\" type=\"number\" click={this.compute} />\r\n                    <Button name=\"6\" type=\"number\" click={this.compute} />\r\n                    <Button name=\"-\" type=\"operator\" click={this.compute} />\r\n                </div>\r\n                <div className=\"row\">\r\n                    <Button name=\"1\" type=\"number\" click={this.compute} />\r\n                    <Button name=\"2\" type=\"number\" click={this.compute} />\r\n                    <Button name=\"3\" type=\"number\" click={this.compute} />\r\n                    <Button name=\"+\" type=\"operator\" click={this.compute} />\r\n                </div>\r\n                <div className=\"row\">\r\n                    <Button name=\"0\" type=\"number large\" click={this.compute} />\r\n                    <Button name=\".\" type=\"number\" click={this.compute} />\r\n                    <Button name=\"=\" type=\"operator\" click={this.compute} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    compute(thing) {\r\n        if (!isNaN(thing) || thing === \".\") {\r\n            // is number\r\n            if (this.state.showing) {\r\n                if (this.state.showing.length >= 16) {\r\n                    return;\r\n                }\r\n                if (this.state.showing.includes(\".\") && thing === \".\") {\r\n                    return;\r\n                }\r\n            }\r\n            this.setState({\r\n                showing: (this.state.showing ? this.state.showing : \"\") + thing,\r\n            });\r\n        } else {\r\n            // is operator\r\n            if (thing === \"AC\") {\r\n                this.setState({\r\n                    showing: null,\r\n                    operator: null,\r\n                    previous: null\r\n                })\r\n                return;\r\n            }\r\n            if (thing === \"=\") {\r\n                if (this.state.operator != null) {\r\n                    this.setState({\r\n                        showing: this.compitewithsign(\r\n                            this.state.operator,\r\n                            this.state.previous ? this.state.previous : 0,\r\n                            this.state.showing ? this.state.showing : 0\r\n                        ),\r\n                        operator: null,\r\n                        previous: null,\r\n                    });\r\n                }\r\n                return;\r\n            }\r\n            let todo = this.state.showing;\r\n            if (this.state.previous && this.state.operator) {\r\n                todo = this.compitewithsign(\r\n                    this.state.operator,\r\n                    this.state.previous,\r\n                    this.state.showing ? this.state.showing : 0\r\n                );\r\n            }\r\n            if (thing === \"×\") {\r\n                this.setState({ operator: \"*\" });\r\n            } else if (thing === \"-\") {\r\n                this.setState({ operator: \"-\" });\r\n            } else if (thing === \"+\") {\r\n                this.setState({ operator: \"+\" });\r\n            } else if (thing === \"÷\") {\r\n                this.setState({ operator: \"/\" });\r\n            } else if (thing === \"%\") {\r\n                this.setState({ operator: \"%\" });\r\n            }\r\n            this.setState({ previous: todo });\r\n            this.setState({ showing: null });\r\n        }\r\n    }\r\n\r\n    compitewithsign(sign, number1, number2) {\r\n        number1 = parseFloat(number1);\r\n        number2 = parseFloat(number2);\r\n        if (sign === \"*\") {\r\n            return number1 * number2;\r\n        }\r\n        if (sign === \"/\") {\r\n            return number1 / number2;\r\n        }\r\n        if (sign === \"+\") {\r\n            return number1 + number2;\r\n        }\r\n        if (sign === \"-\") {\r\n            return number1 - number2;\r\n        }\r\n        if (sign === \"%\") {\r\n            return number1 % number2;\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default Calculator;\r\n","import React from \"react\";\nimport Calculator from \"./components/Calculator\";\n\nfunction App() {\n    return (\n        <Calculator/>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}